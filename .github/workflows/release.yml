name: Customer API | Release

on:
  workflow_dispatch:

env: ${{ secrets }}

permissions:
  id-token: write
  actions: read
  contents: read
  packages: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
    
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to ACR
        run: |
          az acr login --name ${{ env.AZURE_REGISTRY_NAME }}

      - name: Set up Kubectl
        uses: azure/aks-set-context@v2
        with:
          resource-group: ${{ secrets.AZURE_AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AZURE_AKS_CLUSTER_NAME }}

      - name: Extract Secrets with env_ Prefix
        id: extract-secrets
        run: |
          echo "Extracting env-prefixed secrets..."
          found=false
          > env-vars.txt
      
          while IFS= read -r secret; do
            if [[ $secret == ENV_* ]]; then
              found=true
              key=$(echo "$secret" | cut -d= -f1 | sed 's/^ENV_//')
              value=$(echo "$secret" | cut -d= -f2- | sed "s/'/'\"'\"'/g")
              echo "$key=\"$value\"" >> env-vars.txt
              echo "Extracted: $key=$value"
            fi
          done < <(printenv)
      
          if [ "$found" = false ]; then
            echo "No env-prefixed secrets found."
            exit 1
          fi
          
      - name: Display Transformed Environment Variables (Optional)
        run: cat env-vars.txt

      - name: Deploy with Helm
        run: |
          helm upgrade --install customer-api-release ./tools/helm/customer-api-chart \
            --set image.repository="***.azurecr.io/" \
            --set image.tag="" \
            $(awk '{print "--set env."$0}' env-vars.txt)
