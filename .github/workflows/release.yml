name: Customer API | Release

on:
  workflow_dispatch:

env:
  AZURE_REGISTRY_NAME: tiagokcontainerregistry
  AZURE_IMAGE_NAME: customer-api
  AZURE_IMAGE_TAG: latest

permissions:
  id-token: write
  actions: read
  contents: read
  packages: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ALL_SECRETS: ${{ toJson(secrets) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
    
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to ACR
        run: |
          az acr login --name ${{ env.AZURE_REGISTRY_NAME }}

      - name: Set up Kubectl
        uses: azure/aks-set-context@v2
        with:
          resource-group: ${{ secrets.AZURE_AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AZURE_AKS_CLUSTER_NAME }}

      - name: Import env_ prefixed variables
        id: import_env
        uses: Pablommr/import-secrets@v1.0.0
        with:
          prefix: ENV_

      - name: Set environment variables
        run: |
          # Extract all ENV_ variables and set them as environment variables
          echo "AQUI"
          echo "${{ steps.import_env.outputs.env_vars }}"
          ENV_VARS=$(echo "${{ steps.import_env.outputs.env_vars }}" | tr '\n' ' ')
          echo "Extracted ENV Vars: $ENV_VARS"
          echo "$ENV_VARS" | while read -r var; do
            export "$var"
            # Append to values.yaml
            echo "  \"${var#ENV_}\": \"\${${var#ENV_}}\"" >> ./tools/helm/customer-api-chart/values.yaml
          done

      - name: Show updated values.yaml
        run: cat ./tools/helm/customer-api-chart/values.yaml

      - name: Template values.yaml with environment variables
        uses: vafinvr/template-env-action@v2.0.1
        with:
          file: ./tools/helm/customer-api-chart/values.yaml  # Path to your values.yaml file
          output: ./tools/helm/customer-api-chart/values-templated.yaml  # Output file for templated values.yaml
          env: ${{ steps.import_env.outputs.env_vars }}  # Pass all secrets to the action

      - name: Show templated values.yaml
        run: cat ./tools/helm/customer-api-chart/values-templated.yaml  # Check the output file

      - name: Deploy with Helm
        run: |
          helm upgrade --install customer-api-release ./tools/helm/customer-api-chart \
            --set image.repository=${{ env.AZURE_REGISTRY_NAME }}.azurecr.io/${{ env.AZURE_IMAGE_NAME }} \
            --set image.tag=${{ env.AZURE_IMAGE_TAG }} \
            -f ./tools/helm/customer-api-chart/values-templated.yaml  # Use the templated values.yaml
